{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\henriquet\\\\Desktop\\\\projetos\\\\SIM_WEB\\\\src\\\\components\\\\TimePickerInput\\\\index.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport TimePicker from 'react-time-picker';\nimport { useField } from '@rocketseat/unform';\nimport PropTypes from 'prop-types';\nimport { TimePickerInputWrapper } from './styles';\nexport default function TimePickerInput({\n  name,\n  label,\n  disabled,\n  onChange,\n  value,\n  ...rest\n}) {\n  const ref = useRef();\n  const {\n    fieldName,\n    registerField,\n    defaultValue,\n    error\n  } = useField(name);\n  const [selected, setSelected] = useState(defaultValue);\n  useEffect(() => {\n    if (!value || value !== 'Hora inválida') {\n      setSelected(value);\n    }\n  }, [value]);\n  useEffect(() => {\n    console.log(ref.current);\n    ref.current.wrapper.addEventListener('focus', function () {\n      console.log();\n    }); // document\n    //   .getElementById(`${ref.current.wrapper}`)\n    //   .setAttribute('style', 'opacity: 0.7');\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: ref.current,\n      path: 'props.selected',\n      clearValue: pickerRef => {\n        pickerRef.clear();\n      }\n    });\n  }, [ref.current, fieldName]); // eslint-disable-line\n\n  return React.createElement(TimePickerInputWrapper, {\n    id: \"inputEl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: fieldName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, label, React.createElement(TimePicker, Object.assign({\n    disableClock: true,\n    clearIcon: false,\n    hourPlaceholder: \"00\",\n    minutePlaceholder: \"00\",\n    id: fieldName,\n    autoComplete: \"off\",\n    disabled: disabled,\n    name: fieldName,\n    selected: selected,\n    onChange: time => {\n      setSelected(time);\n      onChange(time);\n    },\n    ref: ref\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, error)));\n}\nTimePickerInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  value: PropTypes.any // eslint-disable-line\n\n};\nTimePickerInput.defaultProps = {\n  label: '',\n  disabled: false,\n  onChange: () => {},\n  value: null\n};","map":{"version":3,"sources":["C:/Users/henriquet/Desktop/projetos/SIM_WEB/src/components/TimePickerInput/index.js"],"names":["React","useRef","useEffect","useState","TimePicker","useField","PropTypes","TimePickerInputWrapper","TimePickerInput","name","label","disabled","onChange","value","rest","ref","fieldName","registerField","defaultValue","error","selected","setSelected","console","log","current","wrapper","addEventListener","path","clearValue","pickerRef","clear","time","propTypes","string","isRequired","bool","func","any","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,sBAAT,QAAuC,UAAvC;AAEA,eAAe,SAASC,eAAT,CAAyB;AACtCC,EAAAA,IADsC;AAEtCC,EAAAA,KAFsC;AAGtCC,EAAAA,QAHsC;AAItCC,EAAAA,QAJsC;AAKtCC,EAAAA,KALsC;AAMtC,KAAGC;AANmC,CAAzB,EAOZ;AACD,QAAMC,GAAG,GAAGd,MAAM,EAAlB;AACA,QAAM;AAAEe,IAAAA,SAAF;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA,YAA5B;AAA0CC,IAAAA;AAA1C,MAAoDd,QAAQ,CAACI,IAAD,CAAlE;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAACe,YAAD,CAAxC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,KAAD,IAAUA,KAAK,KAAK,eAAxB,EAAyC;AACvCQ,MAAAA,WAAW,CAACR,KAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,OAAhB;AACAT,IAAAA,GAAG,CAACS,OAAJ,CAAYC,OAAZ,CAAoBC,gBAApB,CAAqC,OAArC,EAA8C,YAAW;AACvDJ,MAAAA,OAAO,CAACC,GAAR;AACD,KAFD,EAFc,CAKd;AACA;AACA;AACD,GARQ,EAQN,EARM,CAAT;AAUArB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa,CAAC;AACZR,MAAAA,IAAI,EAAEO,SADM;AAEZD,MAAAA,GAAG,EAAEA,GAAG,CAACS,OAFG;AAGZG,MAAAA,IAAI,EAAE,gBAHM;AAIZC,MAAAA,UAAU,EAAEC,SAAS,IAAI;AACvBA,QAAAA,SAAS,CAACC,KAAV;AACD;AANW,KAAD,CAAb;AAQD,GATQ,EASN,CAACf,GAAG,CAACS,OAAL,EAAcR,SAAd,CATM,CAAT,CArBC,CA8B6B;;AAE9B,SACE,oBAAC,sBAAD;AAAwB,IAAA,EAAE,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAEA,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KADH,EAEE,oBAAC,UAAD;AACE,IAAA,YAAY,MADd;AAEE,IAAA,SAAS,EAAE,KAFb;AAGE,IAAA,eAAe,EAAC,IAHlB;AAIE,IAAA,iBAAiB,EAAC,IAJpB;AAKE,IAAA,EAAE,EAAEM,SALN;AAME,IAAA,YAAY,EAAC,KANf;AAOE,IAAA,QAAQ,EAAEL,QAPZ;AAQE,IAAA,IAAI,EAAEK,SARR;AASE,IAAA,QAAQ,EAAEI,QATZ;AAUE,IAAA,QAAQ,EAAEW,IAAI,IAAI;AAChBV,MAAAA,WAAW,CAACU,IAAD,CAAX;AACAnB,MAAAA,QAAQ,CAACmB,IAAD,CAAR;AACD,KAbH;AAcE,IAAA,GAAG,EAAEhB;AAdP,KAeMD,IAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAmBGK,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,KAAP,CAnBZ,CADF,CADF;AAyBD;AAEDX,eAAe,CAACwB,SAAhB,GAA4B;AAC1BvB,EAAAA,IAAI,EAAEH,SAAS,CAAC2B,MAAV,CAAiBC,UADG;AAE1BxB,EAAAA,KAAK,EAAEJ,SAAS,CAAC2B,MAFS;AAG1BtB,EAAAA,QAAQ,EAAEL,SAAS,CAAC6B,IAHM;AAI1BvB,EAAAA,QAAQ,EAAEN,SAAS,CAAC8B,IAJM;AAK1BvB,EAAAA,KAAK,EAAEP,SAAS,CAAC+B,GALS,CAKJ;;AALI,CAA5B;AAQA7B,eAAe,CAAC8B,YAAhB,GAA+B;AAC7B5B,EAAAA,KAAK,EAAE,EADsB;AAE7BC,EAAAA,QAAQ,EAAE,KAFmB;AAG7BC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAHW;AAI7BC,EAAAA,KAAK,EAAE;AAJsB,CAA/B","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nimport TimePicker from 'react-time-picker';\n\nimport { useField } from '@rocketseat/unform';\nimport PropTypes from 'prop-types';\n\nimport { TimePickerInputWrapper } from './styles';\n\nexport default function TimePickerInput({\n  name,\n  label,\n  disabled,\n  onChange,\n  value,\n  ...rest\n}) {\n  const ref = useRef();\n  const { fieldName, registerField, defaultValue, error } = useField(name);\n  const [selected, setSelected] = useState(defaultValue);\n\n  useEffect(() => {\n    if (!value || value !== 'Hora inválida') {\n      setSelected(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    console.log(ref.current);\n    ref.current.wrapper.addEventListener('focus', function() {\n      console.log()\n    });\n    // document\n    //   .getElementById(`${ref.current.wrapper}`)\n    //   .setAttribute('style', 'opacity: 0.7');\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: ref.current,\n      path: 'props.selected',\n      clearValue: pickerRef => {\n        pickerRef.clear();\n      },\n    });\n  }, [ref.current, fieldName]); // eslint-disable-line\n\n  return (\n    <TimePickerInputWrapper id=\"inputEl\">\n      <label htmlFor={fieldName}>\n        {label}\n        <TimePicker\n          disableClock\n          clearIcon={false}\n          hourPlaceholder=\"00\"\n          minutePlaceholder=\"00\"\n          id={fieldName}\n          autoComplete=\"off\"\n          disabled={disabled}\n          name={fieldName}\n          selected={selected}\n          onChange={time => {\n            setSelected(time);\n            onChange(time);\n          }}\n          ref={ref}\n          {...rest} // eslint-disable-line\n        />\n        {error && <span>{error}</span>}\n      </label>\n    </TimePickerInputWrapper>\n  );\n}\n\nTimePickerInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  value: PropTypes.any, // eslint-disable-line\n};\n\nTimePickerInput.defaultProps = {\n  label: '',\n  disabled: false,\n  onChange: () => {},\n  value: null,\n};\n"]},"metadata":{},"sourceType":"module"}